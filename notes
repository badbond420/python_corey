# exception handling file:exception_handling.py
- syntax
try:
    # keep sensitive  initial code here
except:
    # handle exceptions
else:
    # if no exception, then write the logic here
finally:
    # no matter what, this block will execute,
    #  so its for cleaning up
- specific exception first, generic exception last.
- except FileNotFoundError as e; here from e we can get lots of details
- user defined exception detain in exception_handling.py file

# duck typing file:duck_typing.py
- the idea is ask for forgivness, if something go wrong. asuming somting will work.
- as you asume , you get a duck, and it will quack, if its a person, then ask forgiveness in code with try block.
- it faster, as u handle handle exception ones, rather than validation objects numerous time.
- race condition, is like quickly somthing changed, which is not excepted
ex:
    if os.access("file"):
        # quickly file deleted by other event
        # as no exception handling, unavoidable situation occured
        fh.open('file')
    else:
        print("file not accessable")
# generators file:generator_stuff.py
- yeild makes a function generator
- instade of creating and returnig a full list, use generater
- next(gen_obj) also works line a iterator
- keeping () instade of [] in list comprihansen, creates a generator.
- generatoer is way faster
- tuple(i for i in (1, 2, 3)) is tupple comprihanseion, as () taken for generator
-
def mygen():
    yeild 1
    x = "lol" # it execute after 1st yeld
    yeild x
like wise
def anither_gen():
    for i  in range(6)
        yeild i
        print("lol") # this is valid and execute on next run

# decoratoer file:decorator.py
- decorater is to dynamically modify a function.
- the idea is in decorater definition collect the return from the function,
  may modify result or do some ather action and re-return again. then return the function
- no mater , whether the decorated function return or not, but keeping return in decorater defination, doesnt harm
- decorater class: no need to call def inside def
- stacking decorater gets issu in geting name of the decorated function
- functools module will help in getting rid of it.
- decorater wit args, is like to add onemore level outer function, with arg, this arg to be
  handled in side inner definition
- this type of decorater , should be defined fully ones, before use.

ex: callable object
class my_callable_calss:
    def __call__(self, name):
        return "hi "+ name

my_callable_object = my_callable_calss()
print(my_callable_object("bibek"))

# Named tupple
! will revisit these collections later.

# classes and instances oop1 file:class_object.py
- encapsulaton is to pack attributes and methods in a single stuff, so called
-  in __init__ method definition  you can call other instance methods as well
- similarly in one ins method definition, you can call other inst methods as well.
ex:
class Emp:
    def __init__(self,fname,lname):
        self.first_name = fname
        self.last_name = lname
        self.email = fname + "." + lname + "@domain.com"
        self.full_name = self.get_name()

    def get_name(self):
        return self.first_name + " " + self.last_name


# class variables file:class_variables.py
- unlike attributes/property class variables are bound to classes not object
- class variables are availables to all instances
- trying to modify class varible in instance level, adds a instance attribute overriding the class variable.
- ClassName.calss_var = 5 : also adds it to ClassName.__dict_ as class are also object.
- constants used in class are recomended to keep as class var, its eacier to access those const by class name
- object counter also one var, whic increased wit init method
- type(self).var evaluates to ClassName.var in inst method: its a good practice as in inheritance.

# classmethod vs staticmethod file:class_static_method.py
- if we make a class variable a pvt variable, to manage that we will use class method.
- we cant address a pvt class variable with a instance method, as we cant use that inst method in class level.
- class methods are mostly used in factory method
- accessing class variables in static method has a problem in inheritance, as
- calling class methods from ins works fine.
ex:
    @staticmethod
    def about():
        print("This class is about {}!".format(Pets.name) # here we cant use type(self)

better method is:
    @classmethod
    def about():
        print("This class is about {}!".format(class.name) # it works well in
- class method is used for alternative constructers or factory methods.
- in datetime module, many factory methods are used
- let sey, someone using our class, and he gets constructer params as a string, so rather that, he writes code to handle the inputs
  and parr to class for creating a object, a pre defined factory function will do it.
- better to use staticmethod where no class/inst bound variables are used.
- static method can be asignd to a class from any randum function, thereafter it will behavie like static method
ex:
def addition(a , b):
    return a + b

Emp.addition = addition
print(Emp.addition(9,8))

- event thr ulternate , works too
ex:
junk_func = Emp.is_working_day
print(junk_func(my_date))

: inheritance file:inheritance.py
- in hertiance is used to re use code and functionality.
ex:
class Developer(Emp):
    pass

hari = Developer("hari","mantry")
- it works as you are not overridiing  __init__ in Developer class
- if you re-define __init__ in child class then, have to explicitly call parent calss function.
- you you want tot tally revamp the new method (method over loading), in this case no need to call the parent class method.
_ init on any method, input can be anything, not only number or string. we can ad emp obj or any object even hot object.
- think of fully object, dont thing only number or string

: dunder methods file:dunder.py
- using dunder methods are called opereter overloading in python, as we define __add__ for our kind of object,
- where as there is a different impimentetion of __add_ for inbuilts(numb,str) or may be different for ther type of object.
- as we  know * has differnt behaviour of nums, and diffrent for string.
- we can define * behaviour with our defined object. let see
- Print always print str(), takes repr if str() is not defined.
- python console retrns repr().
- better to define both always.
- definig __add__, __len__ are example implemented in py file.
_ in __add__ definition, you can check for other'object type and custm logic can applied if heterogenious objects are mentioned.
ex: also possible

print(hari + bibek)
print(Emp.__add__(hari,bibek))
both are same.

: property file:property.py

- instade of using getter setter methods,pythonic way is to use property
- the idea of getter setter is to validate the attribute as well as manipulate private variables.
- encapsulation is not only keeping in sangle rapper but also validate the attributs by validation of getter and setter.
- getter . setter are not only validationg pvt variables, but also setting other accompany attributs as well.like full_name
- using setter also dynamically modify fname and laname too.
- better explained in example.
- setter syntax is li weired,

ex:
@first_name.setter
    def first_name(self,value):
        self.__fname = value

is for
self.first_name = a # here "value"  is for "a" like formal/actual argumant.

- property also can be used inside the class itseld, not only to expose variables to outer world
bibek.fulname = "Kalu Mantry" # ioutside class definition

class Emp:
    def __init__(self,fname,lname):
        self.first_name = fname  # inside definition
        self.last_name = lname

    @property
    def first_name(self):
        return self.__fname

    @first_name.setter
    def first_name(self,value):
        self.__fname = value
- watchfull about this

# context manger file:context_manager.py
- this is used to efectivly close db connactions, handle cleanups for some stuff
- __enter__ and __exit__ is of setup and teardown methods
! will revisit it again

#str repr file:str_repr.py
- str is not always ready for eval.where as repr does.
- repr return returns the same obj, when done eval().
- repr is ment for developers as it gives you representation of object
ex:
    def __repr__(self):
        return 'Emp("{}","{}")'.format(self.first_name,self.last_name)
        # return "lol" # this is tupid

- this is a valid repr, but not any randum stuff in repr witt return the main object by eval
- repr is mor of designig a info so developer can make sense about the object.

# else block in loops
- it make sense if you have something want to do with brak condition, if that doesnt occure, then else executes
ex: check list has even number
def contains_even_number(l):
    for ele in l:
        if ele % 2 == 0:
            print ("list contains an even number")
            break

    # This else executes only if break is NEVER
    # reached and loop terminated after all iterations.
    else:
        print ("list does not contain an even number")

: idempotence file:idempotence.py
- it means f(f(x)) == f(x)
- some functions are idempotence and some are not
- idempotence function is abs()
! in http request get,put,delete(confusion) are idempotence but not post

:string interpolation
- the idea is to not string concatination bu to iterpolute.
-  greeting = 'My name is ' + name + ' and I am ' + str(age) + ' years old' #not recomended
- greeting = 'I am {age} years old and my name is {name}'.format(name=name, age=age) # unordered
- greeting = 'I am {} years old and my name is {}'.format(age,name) #ordered
- in interpoletion you dont have to typecat number or other object type ro string .i.e. no need str(age)

:closure closure.py
- the variable which propagate inside outer to inner function is called, free variable.
- write add3, add2 in both closure and in oop

: memoization file:memoizaton.py
- cachhing some computitional result , so that repeated expensive compution can be ignored.
! get the notes from plural sight funda
! accssing and modifying global var in function without keeping global/ chk scope module

: Ims questioanire
! solve with permutation and combinition
! https://github.com/tchangw/Python-Exercise


: ! logic to check time taken to long floating number
